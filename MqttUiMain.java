/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.paho.client.mqttv3.Ui;

import java.io.*;

import java.io.IOException;
import java.util.Arrays;
// import java.io.ByteArrayInputStream;
// import java.io.ByteArrayOutputStream;

import org.paho.client.mqttv3.*;

import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ARUN YADAV
 */
public class MqttUiMain extends javax.swing.JFrame {
   public static MqttUiMain mu=null;
     Socket socket=null;
    DataOutputStream dos=null;
    MqttWireMessage MW=null;
    DataInputStream dis=null;
    public static boolean Dis=false;
  public static  QueueOutputStream qs=null ; 

    /**
     * Creates new form MQTT_Client
     */
    public MqttUiMain() {
        initComponents();
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        MQTTB = new javax.swing.JButton();
        Options = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        IpAddressL = new javax.swing.JLabel();
        IpAddressT = new javax.swing.JTextField();
        PortL = new javax.swing.JLabel();
        PortT = new javax.swing.JTextField();
        ConnectB = new javax.swing.JButton();
        DisConnectB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        SubscribeDisplayL = new javax.swing.JLabel();
        SubscribeTopicL = new javax.swing.JLabel();
        ReqQosL = new javax.swing.JLabel();
        ReceivedTopicL = new javax.swing.JLabel();
        ReceivedTopicT = new javax.swing.JTextField();
        Qos = new javax.swing.JLabel();
        QosPublish = new javax.swing.JTextField();
        RetainedL = new javax.swing.JLabel();
        SubscribeRetainedCB = new javax.swing.JCheckBox();
        QosComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        SubscibeDisplayTA = new javax.swing.JTextArea();
        SubscribeB = new javax.swing.JButton();
        UnsubscribeB = new javax.swing.JButton();
        SaveB = new javax.swing.JButton();
        SubscribeTopicT = new javax.swing.JTextField();
        ClearB = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        PublishDisplay = new javax.swing.JLabel();
        PublishTopicL = new javax.swing.JLabel();
        PublishTopicT = new javax.swing.JTextField();
        PublishQos = new javax.swing.JLabel();
        PublishQosComboBox = new javax.swing.JComboBox<>();
        PublishRetainedL = new javax.swing.JLabel();
        PublishRetainedCB = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        PublishDisplayTA = new javax.swing.JTextArea();
        PulishB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MQTT_Client");

        MQTTB.setText("MQTT");
        MQTTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MQTTBActionPerformed(evt);
            }
        });

        Options.setText("Options");
        Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(MQTTB)
                .addGap(26, 26, 26)
                .addComponent(Options)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(MQTTB)
                .addComponent(Options))
        );

        IpAddressL.setText("Broker TCP/IP Address :");

        PortL.setText("Port");

        PortT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PortTActionPerformed(evt);
            }
        });

        ConnectB.setText("Connect");
        ConnectB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectBActionPerformed(evt);
            }
        });

        DisConnectB.setText("Disconnect");
        DisConnectB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisConnectBActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon("E:\\Netbeans\\MQTTV3\\src\\org\\paho\\client\\mqttv3\\Ui\\iVIS1.png")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(IpAddressL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IpAddressT, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PortL, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PortT, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(ConnectB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DisConnectB)
                        .addGap(105, 105, 105)))
                .addComponent(jLabel1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IpAddressL, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IpAddressT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PortL, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PortT, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConnectB)
                    .addComponent(DisConnectB)))
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        SubscribeDisplayL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SubscribeDisplayL.setText("Subscribe to Topic - Text Display");

        SubscribeTopicL.setText("Subscribe Topic :");

        ReqQosL.setText("Req. QoS : ");

        ReceivedTopicL.setText("Received Topic :");

        ReceivedTopicT.setEditable(false);
        ReceivedTopicT.setBackground(new java.awt.Color(240, 240, 170));
        ReceivedTopicT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReceivedTopicTActionPerformed(evt);
            }
        });

        Qos.setText("Qos : ");

        QosPublish.setEditable(false);
        QosPublish.setBackground(new java.awt.Color(240, 240, 170));

        RetainedL.setText("Retained :");

        SubscribeRetainedCB.setBackground(new java.awt.Color(240, 240, 170));
        SubscribeRetainedCB.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        SubscribeRetainedCB.setOpaque(false);
        SubscribeRetainedCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubscribeRetainedCBActionPerformed(evt);
            }
        });

        QosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2" }));

        SubscibeDisplayTA.setEditable(false);
        SubscibeDisplayTA.setBackground(new java.awt.Color(255, 250, 200));
        SubscibeDisplayTA.setColumns(20);
        SubscibeDisplayTA.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        SubscibeDisplayTA.setRows(5);
        jScrollPane1.setViewportView(SubscibeDisplayTA);

        SubscribeB.setText("Subscribe");
        SubscribeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubscribeBActionPerformed(evt);
            }
        });

        UnsubscribeB.setText("Unsubsribe");
        UnsubscribeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnsubscribeBActionPerformed(evt);
            }
        });

        SaveB.setText("Save");
        SaveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBActionPerformed(evt);
            }
        });

        SubscribeTopicT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubscribeTopicTActionPerformed(evt);
            }
        });

        ClearB.setText("Clear");
        ClearB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(UnsubscribeB, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                    .addComponent(SubscribeB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SaveB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(ClearB))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(SubscribeDisplayL, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(SubscribeTopicL, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SubscribeTopicT, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(ReqQosL, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(QosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(ReceivedTopicL)
                                        .addGap(18, 18, 18)
                                        .addComponent(ReceivedTopicT, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Qos, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(QosPublish, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RetainedL)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(SubscribeRetainedCB, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SubscribeDisplayL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ReqQosL, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(QosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SubscribeTopicT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SubscribeTopicL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ReceivedTopicL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ReceivedTopicT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Qos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(QosPublish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RetainedL))
                    .addComponent(SubscribeRetainedCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ClearB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(SubscribeB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UnsubscribeB)
                        .addGap(7, 7, 7)
                        .addComponent(SaveB, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addComponent(jScrollPane1)))
        );

        PublishDisplay.setFont(new java.awt.Font("Traditional Arabic", 1, 14)); // NOI18N
        PublishDisplay.setText("Publish Massege -  Text Display");

        PublishTopicL.setText("Topic :");

        PublishTopicT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublishTopicTActionPerformed(evt);
            }
        });

        PublishQos.setText("QoS");

        PublishQosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2" }));

        PublishRetainedL.setText("Retained :");

        PublishDisplayTA.setColumns(20);
        PublishDisplayTA.setRows(5);
        jScrollPane2.setViewportView(PublishDisplayTA);

        PulishB.setText("Publish");
        PulishB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PulishBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(PublishDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(PublishTopicL, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PublishTopicT, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PublishQos, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PublishQosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PublishRetainedL, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PublishRetainedCB))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PulishB, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PublishDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PublishTopicL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PublishTopicT, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PublishQos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PublishQosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PublishRetainedL, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PublishRetainedCB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(PulishB)
                        .addGap(0, 59, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PortTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PortTActionPerformed
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_PortTActionPerformed

    private void DisConnectBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisConnectBActionPerformed
       try {
           // TODO add your handling code here:
           
           
           MW = new MqttDisconnect();
           qs.SubmitInQueue(MW);
           Dis=true;
           
           /*
           try {
           dos.write(MW.getHeader(), 0, (MW.getHeader()).length);
           dos.flush();
           } catch (IOException ex) {
           System.out.println("IOEx DisconnectB");
           }
           SubscibeDisplayTA.append("\nClient Disconnected");
           */
       } catch (InterruptedException ex) {
           Logger.getLogger(MqttUiMain.class.getName()).log(Level.SEVERE, null, ex);
       }
    }//GEN-LAST:event_DisConnectBActionPerformed

    private void SubscribeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubscribeBActionPerformed
       try {
           // TODO add your handling code here:
           
           MW = new MqttSubscribe( SubscribeTopicT.getText(),
                   Integer.parseInt(QosComboBox.getSelectedItem().toString()));
                   qs.SubmitInQueue(MW);
           
           // qs.Write();
           
           /*  dos.write(MS.getHeader(), 0, MS.getHeader().length);
           dos.write(MS.getPayload(), 0, MS.getPayload().length);
           dos.flush();
           */
           /*     byte[] suback = new byte[10];
           dis=new DataInputStream(socket.getInputStream());
           
           dis.read(suback);
           if (suback[3] == 0 || suback[3] == 1 || suback[3] == 2) {
           
           SubscibeDisplayTA.append("\nSubscribed topic " + suback[3] + " qos");
           }
           
           } catch (IOException ex) {
           System.out.println("IOEx subscribe button");
           }}*/
           
           //................
           /*
           byte [] rec=new byte[100];
           try{
           dis.read(rec);
           if((rec[0]>>4)==3){
           ReceivedTopicT.setText("\n"+(char)rec[4]+""+(char)rec[5]+""+(char)rec[6]+""+(char)rec[7]+""+(char)rec[8]);
           SubscibeDisplayTA.append("\n"+(char)rec[4]+""+(char)rec[5]+""+(char)rec[6]
           +""+(char)rec[7]+""+(char)rec[8]+""+(char)rec[9]+""+(char)rec[10]);
           }
           }
           catch (IOException ex)
           {
           System.out.println("IOEx received subscib B");
           }
           */
       } catch (InterruptedException ex) {
           Logger.getLogger(MqttUiMain.class.getName()).log(Level.SEVERE, null, ex);
       }
    }//GEN-LAST:event_SubscribeBActionPerformed

    private void ReceivedTopicTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReceivedTopicTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReceivedTopicTActionPerformed

    private void SubscribeRetainedCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubscribeRetainedCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SubscribeRetainedCBActionPerformed

    private void SaveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveBActionPerformed

    private void SubscribeTopicTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubscribeTopicTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SubscribeTopicTActionPerformed

    private void MQTTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MQTTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MQTTBActionPerformed

    private void OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsActionPerformed
        // TODO add your handling code here:

        new MqttUiOptions().setVisible(true);
        //System.out.print("heloo option ");
    }//GEN-LAST:event_OptionsActionPerformed

    private void PublishTopicTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublishTopicTActionPerformed
                  
    }//GEN-LAST:event_PublishTopicTActionPerformed

    private void ConnectBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectBActionPerformed
       try {
           // TODO add your handling code here:

           
           // MqttConnect mq=null;
           qs=new QueueOutputStream(IpAddressT.getText(), Integer.parseInt(PortT.getText()));
           
           // qs=new QueueOutputStream("iot.eclipse.org",1883);
           // SocketConnect();
           MW = new MqttConnect( OptionValues.ClientId, 4, OptionValues.CleanSession,
                   OptionValues.KeepAlive, OptionValues.UserName,
                   OptionValues.Password, null, "");
           
           //  System.out.println(Arrays.toString(mq.getHeader()));
           // System.out.println(Arrays.toString(mq.getPayload()));
           
           qs.SubmitInQueue(MW);
           // qs.Write();
           
           
           
           
           
           
           // qs.Write();
           /* try {
           
           dos = new DataOutputStream(socket.getOutputStream());
           
           dos.write(MW.getHeader(), 0, (MW.getHeader()).length);
           dos.write(MW.getPayload(), 0, (MW.getPayload()).length);
           dos.flush();
           } catch (IOException ex) {
           System.out.println("IOEx in connect");
           }
           
           // /*.................
           byte[] ack = new byte[7];
           try {
           dis = new DataInputStream(socket.getInputStream());
           dis.read(ack);
           if (ack[3] == 0x00) {
           SubscibeDisplayTA.append("iVIS Client Connected to server ");
           }
           //SubscibeDisplayTA.append(" \nClient Connected to iot server ");
           } catch (IOException ex) {
           
           }
           
           //*/ 
       } catch (InterruptedException ex) {
           Logger.getLogger(MqttUiMain.class.getName()).log(Level.SEVERE, null, ex);
       }
    }//GEN-LAST:event_ConnectBActionPerformed

    private void PulishBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PulishBActionPerformed
       try {
           // TODO add your handling code here:
           
           
                   MW =new MqttPublish(PublishTopicT.getText(), PublishDisplayTA.getText(),
                   Integer.parseInt((PublishQosComboBox.getSelectedItem()).toString()),
                   PublishRetainedCB.isSelected());
                   qs.SubmitInQueue(MW);
           
           //   qs.Write();
           /*  dos = new DataOutputStream(socket.getOutputStream());
           dos.write(MW.getHeader(), 0, (MW.getHeader()).length);
           dos.write(MW.getPayload(), 0, (MW.getPayload()).length);
           dos.flush();
           } catch (IOException ex) {
           System.out.println("IOEx  in Publish");
           }  */
           //byte [] ack=new byte[]
           
           // qs.Write();
       } catch (InterruptedException ex) {
           Logger.getLogger(MqttUiMain.class.getName()).log(Level.SEVERE, null, ex);
       }
    }//GEN-LAST:event_PulishBActionPerformed

    private void UnsubscribeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnsubscribeBActionPerformed
       try {
           // TODO add your handling code here:
           
             MW=new MqttUnsubscribe(SubscribeTopicT.getText());
             qs.SubmitInQueue(MW);
           
           /* try {
           dos = new DataOutputStream(socket.getOutputStream());
           
           dos.write(MW.getHeader(), 0, (MW.getHeader()).length);
           dos.write(MW.getPayload(), 0, (MW.getPayload()).length);
           dos.flush();
           } catch (IOException ex) {
           System.out.println("IOEx in connect");
           }
           */
           /*
           byte[] unsuback = new byte[5];
           try {
           dis = new DataInputStream(socket.getInputStream());
           dis.read(unsuback);
           if ((unsuback[0]>>4) == 11 ) {
           SubscibeDisplayTA.append("\nUnsubscribe topic : "+SubscribeTopicT.getText());
           }
           //SubscibeDisplayTA.append(" \nClient Connected to iot server ");
           } catch (IOException ex) {
           
           }*/
       } catch (InterruptedException ex) {
           Logger.getLogger(MqttUiMain.class.getName()).log(Level.SEVERE, null, ex);
       }
        
        
    }//GEN-LAST:event_UnsubscribeBActionPerformed

    private void ClearBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBActionPerformed
                  SubscibeDisplayTA.setText("");       
    }//GEN-LAST:event_ClearBActionPerformed
   
 /*   private void  SocketConnect()
    {
         try {
            socket = new Socket(IpAddressT.getText(), Integer.parseInt(PortT.getText()));
        } catch (UnknownHostException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        }
        if (socket.isConnected()) {
            SubscibeDisplayTA.append("\nSocket Connected :\n");
        }
    }
   public Socket getSocket()
   {
       return socket;
   }
    
    */
   public void PrintReceiveMessage(String topicName,String Msg,String qos,boolean retained)
    {
         ReceivedTopicT.setText(topicName);
         SubscibeDisplayTA.append("\n"+Msg);
         QosPublish.setText(qos);
         SubscribeRetainedCB.setSelected(retained);
     }
    
   public void connectAck(String ack)
   {
      SubscibeDisplayTA.append("\n"+ack);  
      Dis=false;
   }
    
    
     /**
      * @param args the command line arguments
      */
     public static void main(String args[]) {
         /* Set the Nimbus look and feel */
         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
          */
         try {
             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                 if ("Nimbus".equals(info.getName())) {
                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
                     break;
                 }
             }
         } catch (ClassNotFoundException ex) {
             java.util.logging.Logger.getLogger(MqttUiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
             java.util.logging.Logger.getLogger(MqttUiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
             java.util.logging.Logger.getLogger(MqttUiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
             java.util.logging.Logger.getLogger(MqttUiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }
         //</editor-fold>
         //</editor-fold>

         /* Create and display the form */
         java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
              mu  =(new MqttUiMain());//.setVisible(true);
              mu.setVisible(true);
           //  mu.Start();//.setVisible(true);
             }
         });
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearB;
    private javax.swing.JButton ConnectB;
    private javax.swing.JButton DisConnectB;
    private javax.swing.JLabel IpAddressL;
    private javax.swing.JTextField IpAddressT;
    private javax.swing.JButton MQTTB;
    private javax.swing.JButton Options;
    private javax.swing.JLabel PortL;
    private javax.swing.JTextField PortT;
    private javax.swing.JLabel PublishDisplay;
    private javax.swing.JTextArea PublishDisplayTA;
    private javax.swing.JLabel PublishQos;
    private javax.swing.JComboBox<String> PublishQosComboBox;
    private javax.swing.JCheckBox PublishRetainedCB;
    private javax.swing.JLabel PublishRetainedL;
    private javax.swing.JLabel PublishTopicL;
    private javax.swing.JTextField PublishTopicT;
    private javax.swing.JButton PulishB;
    private javax.swing.JLabel Qos;
    private javax.swing.JComboBox<String> QosComboBox;
    private javax.swing.JTextField QosPublish;
    private javax.swing.JLabel ReceivedTopicL;
    private javax.swing.JTextField ReceivedTopicT;
    private javax.swing.JLabel ReqQosL;
    private javax.swing.JLabel RetainedL;
    private javax.swing.JButton SaveB;
    private javax.swing.JTextArea SubscibeDisplayTA;
    private javax.swing.JButton SubscribeB;
    private javax.swing.JLabel SubscribeDisplayL;
    private javax.swing.JCheckBox SubscribeRetainedCB;
    private javax.swing.JLabel SubscribeTopicL;
    private javax.swing.JTextField SubscribeTopicT;
    private javax.swing.JButton UnsubscribeB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables


}
